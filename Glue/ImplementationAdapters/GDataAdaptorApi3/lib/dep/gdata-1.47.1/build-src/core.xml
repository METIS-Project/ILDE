<project name="core" default="build.core" basedir=".">

  <!-- Path containing core.xml -->
  <dirname property="build_dir" file="${ant.file.core}"/>

<!--  ===================================================================== -->
<!--                      Global targets                                    -->
<!--  ===================================================================== -->
  <!-- Root build path -->
  <property name="build" value="${build_dir}/../"/>


  <!-- Path for generated files -->
  <property name="build.manifest" value="${build}/manifest"/>
  <property name="build.genfiles" value="${build}/genfiles"/>
  <property name="build.genfiles.manifest" value="${build.genfiles}/manifest"/>
  <property name="build.genfiles.meta" value="${build.genfiles}/meta"/>


  <!-- Path for compiled files -->
  <property name="build.classes" value="${build}/classes"/>
  <property name="build.jars" value="${build}/lib"/>


  <!-- User properties -->
  <property name="version.properties" value="${build}/version.properties"/>
  <property name="build.properties" value="${build_dir}/build.properties"/>
  <property file="${version.properties}"/>
  <property file="${build.properties}"/>

  <property name="gdata-client.jar"
            value="${build.jars}/gdata-client-${client.spec.version}.jar"/>
  <property name="gdata-media.jar"
            value="${build.jars}/gdata-media-${media.spec.version}.jar"/>


  <!-- ========================= global rules ============================ -->

  <!-- create build paths -->
  <target name="dirs">
    <mkdir dir="${build.jars}"/>
    <mkdir dir="${build.classes}"/>
  </target>

  <!-- Generates manifest files with appropriate version information. -->
  <target name="build.manifest">
    <mkdir dir="${build.genfiles.manifest}"/>
    <copy todir="${build.genfiles.manifest}">
      <fileset dir="${build.manifest}">
        <include name="*.manifest"/>
      </fileset>
      <filterset>
        <filtersfile file="${version.properties}"/>
      </filterset>
    </copy>
  </target>



<!--  =================================================================== -->
<!--                  Template to build service jars                      -->
<!--  =================================================================== -->
  <!-- path for third_party google dependencies -->
  <path id="build.google-deps.classpath">
    <pathelement location="${google-jsr305.jar}"/>
    <pathelement location="${google-oauth-client.jar}"/>
    <pathelement location="${guava.jar}"/>
  </path>

  <!-- Dependency path for all services -->
  <path id="build.service.core.classpath">
    <path refid="build.google-deps.classpath"/>
    <pathelement location="${gdata-client.jar}"/>
  </path>

  <!-- Dependency path for all media enabled services -->
  <path id="build.service.media.classpath">
    <path refid="build.service.core.classpath"/>
    <pathelement location="${mail.jar}"/>
    <pathelement location="${activation.jar}"/>
    <pathelement location="${gdata-media.jar}"/>
  </path>

  <!-- Prepare to build service: set properties and check status. -->
  <target name="template.build.service.init">
    <property name="template.service.meta"
      value="${build.genfiles.meta}/${template.service.name}"/>
    <property name="template.service.meta.kinds"
      value="${template.service.meta}/META-INF/gdata/kinds"/>
    <property name="template.service.meta.jar"
      value="${build.jars}/gdata-${template.service.name}-meta-${template.service.version}.jar"/>
    <property name="template.service.jar"
      value="${build.jars}/gdata-${template.service.name}-${template.service.version}.jar"/>
    <property name="template.service.classes"
      value="${build.classes}/${template.service.name}"/>
    <property name="template.service.manifest"
      value="${build.genfiles.manifest}/${template.service.name}.manifest"/>

    <!-- Compare src files to the targetdir to see if src is more recent. -->
    <!-- Will allow unecessary compilation still, but eliminates most -->
    <uptodate property="template.build.service.meta.isCurrent"
              targetfile="${template.service.meta.kinds}">
      <srcfiles dir="${build.src}"
                includes="${template.service.includes}"
                excludes="${template.service.excludes}"/>
    </uptodate>
  </target>

  <!-- Build the meta data for the service if it is out of date. -->
  <target name="template.build.service.meta"
          depends="template.build.service.init"
          unless="template.build.service.meta.isCurrent">
    <mkdir dir="${template.service.meta.kinds}"/>
    <apt debug="false"
         srcdir="${build.src}"
         destdir="${template.service.meta.kinds}"
         compile="false"
         factory="com.google.gdata.data.apt.DataAnnotationProcessorFactory"
         includes="${template.service.includes}"
         excludes="${template.service.excludes}">
        <classpath refid="${template.service.classpath}"/>
    </apt>
    <jar destfile="${template.service.meta.jar}">
      <fileset dir="${template.service.meta}">
        <include name="META-INF/**"/>
      </fileset>
    </jar>
  </target>

  <!-- Generic template target to build service specific jar
  Params:
    @param template.service.name    name of the service
    @param template.service.version specification verison for the service.
    @param template.service.includes comma separated list of src paths to
          relative to "src".  example, for "calendar" its enough to specify
          wildcard representation of service specific package name as
          "**/calendar/**".  This means the sevice specific code under
          "com.google.gdata.{data|client}.<service>" will be included.
    @param template.service.excludes comma separated list of src paths or files
          that needs to be excluded from the above include list. Specify "none"
          if nothing to exclude.
    @param template.service.classpath classpath to be used in the javac targets
          to build service specific jar.  gdata-client.jar is included by
          default.  Specify "none" if there are no additional dependencies.
  -->
  <target name="template.build.service" depends="template.build.service.meta">
    <!-- Build the service jar -->
    <mkdir dir="${template.service.classes}"/>
    <javac debug="${javac.debug}"
           debuglevel="${javac.debuglevel}"
           sourcepath=""
           srcdir="${build.src}"
           destdir="${template.service.classes}"
           includes="${template.service.includes}"
           excludes="${template.service.excludes}">
          <classpath>
            <path refid="${template.service.classpath}"/>
            <pathelement location="${template.service.meta.jar}"/>
          </classpath>
    </javac>
    <jar destfile="${template.service.jar}"
         basedir="${template.service.classes}"
         manifest="${template.service.manifest}"/>
  </target>


  <!-- Template to clean generated intermediate files
  Params:
    @param template.service.name service name
  -->
  <target name="template.clean.service">
    <delete dir="${build.classes}/${template.service.name}"/>
    <delete dir="${build.genfiles.meta}/${template.service.name}"/>
    <delete file="${build.genfiles.manifest}/${template.service.name}.manifest"/>
  </target>

  <!-- Template to check if Service libs are already built
  Params:
    @param template.service.name  name of the service
    @param template.service.version specificaiton version for the service
  -->
  <target name="template.require.service.jar">
    <property name="template.service.jar"
      value="${build.jars}/gdata-${template.service.name}-${template.service.version}.jar"/>
    <available
      file="${template.service.jar}"
      property="has.service.jar"/>
    <fail unless="has.service.jar">
      Missing dependency jar: ${template.service.jar}
      Please run "ant ${template.service.name}.build.${template.service.name}".
    </fail>
  </target>



<!--  ===================================================================== -->
<!--                  Core library targets                                  -->
<!--  ===================================================================== -->

  <!-- Path for generated files -->
  <property name="gdata-core.manifest"
            value="${build.genfiles.manifest}/core.manifest"/>
  <property name="gdata-client.manifest"
            value="${build.genfiles.manifest}/client.manifest"/>
  <property name="gdata-media.manifest"
            value="${build.genfiles.manifest}/media.manifest"/>
  <property name="build.genfiles.meta.client"
            value="${build.genfiles.meta}/client"/>
  <property name="build.genfiles.meta.client.kinds"
            value="${build.genfiles.meta.client}/META-INF/gdata/kinds"/>


  <!-- Path for compiled files -->
  <property name="build.classes.core" value="${build.classes}/core"/>
  <property name="build.classes.client" value="${build.classes}/client"/>
  <property name="build.classes.media" value="${build.classes}/media"/>
  <property name="gdata-core.jar"
            value="${build.jars}/gdata-core-${client.spec.version}.jar"/>
  <property name="gdata-client-meta.jar"
            value="${build.jars}/gdata-client-meta-${client.spec.version}.jar"/>

  <!-- Path for source code -->
  <property name="build.src" value="${build}/src"/>


  <!-- ===================== core library rules ========================== -->
  <target name="build.core" description="Builds gdata client library"
          depends="build.core.client,build.core.media"/>

  <!-- Clean all files generated by project -->
  <target name="clean.core" description="Cleans all generated files">
    <delete dir="${build.genfiles}" />
    <delete dir="${build.classes}" />
    <delete dir="${build.jars}" />
  </target>



  <!-- clean files generated for client and base libraries -->
  <target name="clean.core.base"
      description="Cleans generated files client library">
    <delete dir="${build.classes.core}"/>
    <delete dir="${build.classes.client}"/>
    <delete dir="${build.genfiles.meta.client}"/>
    <delete file="${gdata-core.manifest}"/>
    <delete file="${gdata-client.manifest}"/>
  </target>


  <!-- build gdata-core.jar -->
  <target name="build.core.base" depends="dirs,build.manifest">
    <mkdir dir="${build.classes.core}"/>

    <javac debug="${javac.debug}"
           debuglevel="${javac.debuglevel}"
           sourcepath=""
           srcdir="${build.src}"
           destdir="${build.classes.core}">
      <include name="com/google/gdata/client/*.java"/>
      <include name="com/google/gdata/client/authn/**/*.java"/>
      <include name="com/google/gdata/client/batch/**/*.java"/>
      <include name="com/google/gdata/client/http/**/*.java"/>
      <include name="com/google/gdata/client/uploader/**/*.java"/>
      <include name="com/google/gdata/data/*.java"/>
      <include name="com/google/gdata/data/acl/**/*.java"/>
      <include name="com/google/gdata/data/apt/**/*.java"/>
      <include name="com/google/gdata/data/batch/**/*.java"/>
      <include name="com/google/gdata/data/dublincore/**/*.java"/>
      <include name="com/google/gdata/data/geo/**/*.java"/>
      <include name="com/google/gdata/data/introspection/**/*.java"/>
      <include name="com/google/gdata/data/threading/**/*.java"/>
      <include name="com/google/gdata/model/*.java"/>
      <include name="com/google/gdata/model/atom/*.java"/>
      <include name="com/google/gdata/model/atompub/*.java"/>
      <include name="com/google/gdata/model/batch/*.java"/>
      <include name="com/google/gdata/model/gd/*.java"/>
      <include name="com/google/gdata/model/transforms/atom/*.java"/>
      <include name="com/google/gdata/model/transforms/atompub/*.java"/>
      <include name="com/google/gdata/util/**/*.java"/>
      <include name="com/google/gdata/wireformats/*.java"/>
      <include name="com/google/gdata/wireformats/input/*.java"/>
      <include name="com/google/gdata/wireformats/output/*.java"/>
      <exclude name="com/google/gdata/data/MediaContent.java"/>
      <classpath refid="build.google-deps.classpath"/>
    </javac>
    <jar destfile="${gdata-core.jar}"
         basedir="${build.classes.core}"
         manifest="${gdata-core.manifest}">
    </jar>
  </target>


  <!-- build gdata-client-meta.jar -->
  <target name="chk.build.core.client.meta">
    <!-- Compare src files to the targetdir to see if src is more recent. -->
    <!-- Will allow unecessary compilation still, but eliminates most -->
    <uptodate property="build.core.client.meta.isCurrent"
              targetfile="${build.genfiles.meta.client.kinds}">
      <srcfiles dir="${build.src}"
                includes="com/google/gdata/data/extensions/*.java"/>
    </uptodate>
  </target>
  <target name="build.core.client.meta"
          depends="build.core.base,chk.build.core.client.meta"
          unless="build.core.client.meta.isCurrent">
    <mkdir dir="${build.genfiles.meta.client.kinds}"/>
    <apt debug="false"
         srcdir="${build.src}"
         destdir="${build.genfiles.meta.client.kinds}"
         compile="false"
         factory="com.google.gdata.data.apt.DataAnnotationProcessorFactory">
        <classpath>
          <pathelement location="${gdata-core.jar}"/>
          <path refid="build.google-deps.classpath"/>
        </classpath>
        <include name="com/google/gdata/data/extensions/*.java"/>
    </apt>
    <jar destfile="${gdata-client-meta.jar}">
      <fileset dir="${build.genfiles.meta.client}">
        <include name="META-INF/**"/>
      </fileset>
    </jar>
  </target>


  <!-- build gdata-client.jar -->
  <target name="build.core.client" depends="build.core.client.meta">
    <mkdir dir="${build.classes.client}"/>
    <javac debug="${javac.debug}"
           debuglevel="${javac.debuglevel}"
           sourcepath=""
           srcdir="${build.src}"
           destdir="${build.classes.client}">
        <include name="com/google/gdata/data/extensions/*.java"/>
        <classpath>
          <path refid="build.google-deps.classpath"/>
          <pathelement location="${gdata-core.jar}"/>
          <pathelement location="${gdata-client-meta.jar}"/>
        </classpath>
    </javac>
    <jar destfile="${gdata-client.jar}"
         basedir="${build.classes.client}"
         manifest="${gdata-client.manifest}">
    </jar>
  </target>


  <!-- build gdata-media.jar -->
  <path id="build.media.classpath">
    <pathelement location="${mail.jar}"/>
    <pathelement location="${activation.jar}"/>
    <pathelement location="${gdata-core.jar}"/>
    <pathelement location="${gdata-client.jar}"/>
  </path>

  <target name="build.core.media"
      depends="require.client.dependencies,build.core.client">
    <mkdir dir="${build.classes.media}"/>
    <javac debug="${javac.debug}"
           debuglevel="${javac.debuglevel}"
           sourcepath=""
           srcdir="${build.src}"
           destdir="${build.classes.media}">
      <classpath>
        <path refid="build.google-deps.classpath"/>
        <path refid="build.media.classpath"/>
      </classpath>
      <include name="**/data/MediaContent.java"/>
      <include name="**/data/media/**"/>
      <include name="**/client/media/**"/>
      <include name="**/model/media/*.java"/>
      <include name="**/model/mediarss/*.java"/>
      <include name="**/wireformats/input/media/*.java"/>
      <include name="**/wireformats/output/media/*.java"/>
    </javac>
    <jar destfile="${gdata-media.jar}"
         basedir="${build.classes.media}"
         manifest="${gdata-media.manifest}">
    </jar>
  </target>

  <target name="clean.core.media">
    <delete dir="${build.classes.media}"/>
    <delete file="${gdata-media.manifest}"/>
  </target>


<!--  ===================================================================== -->
<!--                      Third party dependency checks                     -->
<!--  ===================================================================== -->
  <!--  Dependencies for media extensions -->
  <target name="require.client.dependencies">
    <available file="${mail.jar}" property="has.sunmail"/>
    <available file="${activation.jar}" property="has.sunactivation"/>
    <fail unless="has.sunmail">missing jar file: ${mail.jar}
The GData client requires Oracle's javamail API (version 1.4), which
is not included in this distribution.

You can download it from:
  http://www.oracle.com/technetwork/java/javamail/index.html

Then save it under:
  ${mail.jar}
    </fail>
    <fail unless="has.sunactivation">missing jar file: ${activation.jar}
The GData client requires Oracle's Activation Framework 1.1, which
is not included in this distribution.

You can download it from:
 http://www.oracle.com/technetwork/java/javase/downloads/index-135046.html

Then save it under:
  ${activation.jar}
    </fail>
  </target>


  <target name="require.servlet-api">
    <available file="${servlet.jar}" property="has.servlet-api"/>
    <fail unless="has.servlet-api">missing jar file: ${servlet.jar}
The recipe example requires Sun's Servlet API (version 2.3 or 2.4), which
is not included in this distribution.

You can download it from:
 http://www.oracle.com/technetwork/java/index-jsp-135475.html

Then save it under:
  ${servlet.jar}
    </fail>
  </target>


</project>
