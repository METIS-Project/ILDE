#compdef trial
_arguments -s -A "-*" \
"*:file|module|package|TestCase|testMethod:_files -g '*.py'" \
'(--reactor)-r[Which reactor to use out of: kqueue, poll, qt, default, win, cfreactor, gtk, cf, glade, win32, gtk2, iocp, glib2, threadedselect, wx.]:reactor:(kqueue poll qt default win cfreactor gtk cf glade win32 gtk2 iocp glib2 threadedselect wx)' \
'(-r)--reactor=[Which reactor to use out of: kqueue, poll, qt, default, win, cfreactor, gtk, cf, glade, win32, gtk2, iocp, glib2, threadedselect, wx.]:reactor:(kqueue poll qt default win cfreactor gtk cf glade win32 gtk2 iocp glib2 threadedselect wx)' \
'(--extra)-x[Add an extra argument.  (This is a hack necessary for interfacing with]:extra:_files' \
'(-x)--extra=[Add an extra argument.  (This is a hack necessary for interfacing with]:extra:_files' \
'(--random)-z[Run tests in random order using the specified seed]:random seed:_files' \
'(-z)--random=[Run tests in random order using the specified seed]:random seed:_files' \
'--help-reporters[Help on available output plugins (reporters)]' \
'--recursionlimit=[see sys.setrecursionlimit()]:recursionlimit:_files' \
'--tbformat=[Specify the format to display tracebacks with. Valid formats are]:tbformat:(plain emacs cgitb)' \
'--spew[Print an insanely verbose log of everything that happens.  Useful]' \
"(--no-recurse)-N[Don't recurse into packages]" \
"(-N)--no-recurse[Don't recurse into packages]" \
'(--help)-h[Display this help and exit.]' \
'(-h)--help[Display this help and exit.]' \
'--version[version]' \
"--nopm[don't automatically jump into debugger for postmorteming of exceptions]" \
'--profile[Run tests under the Python profiler]' \
'(--dry-run)-n[do everything but run the tests]' \
'(-n)--dry-run[do everything but run the tests]' \
'--suppresswarnings[Only print warnings to log, not stdout. DEPRECATED.]' \
'--reporter=[The reporter to use for this test run.  See --help-reporters]:reporter:(bwverbose text timing verbose summary)' \
'--coverage[Generate coverage information in the given directory (relative to]' \
'(--logfile)-l[log file name]:log file name:_files' \
'(-l)--logfile=[log file name]:log file name:_files' \
'(--rterrors)-e[realtime errors, print out tracebacks as soon as they occur]' \
'(-e)--rterrors[realtime errors, print out tracebacks as soon as they occur]' \
'--testmodule=[Filename to grep for test cases (-*- test-case-name)]:testmodule:_files' \
'(--until-failure)-u[Repeat test until it fails]' \
'(-u)--until-failure[Repeat test until it fails]' \
'(--debug-stacktraces)-B[Report Deferred creation and callback stack traces]' \
'(-B)--debug-stacktraces[Report Deferred creation and callback stack traces]' \
"(--debug)-b[Run tests in the Python debugger. Will load '.pdbrc' from current directory if it exists.]" \
"(-b)--debug[Run tests in the Python debugger. Will load '.pdbrc' from current directory if it exists.]" \
'--temp-directory=[Path to use as working directory for tests.]:temp-directory:_files' \
'--disablegc[Disable the garbage collector]' \
&& return 0
