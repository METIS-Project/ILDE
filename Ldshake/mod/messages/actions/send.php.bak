<?php

    /**
	 * Elgg send a message action page
	 * 
	 * @package ElggMessages
	 * @license http://www.gnu.org/licenses/old-licenses/gpl-2.0.html GNU Public License version 2
	 * @author Curverider Ltd <info@elgg.com>
	 * @copyright Curverider Ltd 2008
	 * @link http://elgg.com/
	 */
	 
	 // Make sure we're logged in (send us to the front page if not)
		if (!isloggedin()) forward();
     
    // Get input data
		$title = get_input('title'); // message title
        $message_contents = get_input('message'); // the message
        $send_to = get_input('send_to'); // this is the user guid to whom the message is going to be sent
        $reply = get_input('reply'); // this is the guid of the message replying to
        /// LdShake change ///
        //$groupReply = get_input('group_reply');
        $nonMemberGroupReply = get_input('non_member_group_reply');

        $recipient = get_entity($send_to);

        if(!$recipient) {
            register_error(elgg_echo("messages:user:nonexist"));
            forward();
        }

        if(!($recipient instanceof ElggUser || $recipient instanceof ElggGroup)) {
            register_error(elgg_echo("messages:user:nonexist"));
            forward();
        }
        /// LdShake change ///

        /*
        $user = get_user($send_to);
        if (!$user) {
        	register_error(elgg_echo("messages:user:nonexist"));
        	forward();
        }
        */
        
    // put in another check to make sure the user can only send messages as themselves
        $owner_id = $_SESSION['user']->getGUID();
		
    // Make sure the message field, send to field and title are not blank
		if (empty($message_contents) || empty($send_to) || empty($title)) {
			register_error(elgg_echo("messages:blank"));
			forward("mod/messages/send.php");
			
	// Otherwise, 'send' the message 
		} else {
			/// LdShake change ///
            $recipient_list = array();

            if($recipient instanceof ElggUser) {
                $recipient_list[] = get_user($recipient->guid);
            } else {
                $recipient_list = get_group_members($recipient->guid, 9999);
                if($nonMemberGroupReplyUser = get_user($nonMemberGroupReply)) {
                    if(!is_group_member($recipient->guid, $nonMemberGroupReply)) {
                        $recipient_list[] = $nonMemberGroupReplyUser;
                    }
                }
                if(!$reply)
                    $nonMemberGroupReply = $owner_id;
            }

            foreach($recipient_list as $r) {
                if($r->getGUID() != $_SESSION['user']->getGUID()) {
                    // Initialise a new ElggObject
                    $message = new ElggObject();
                    // Tell the system it's a message
                    $message->subtype = "messages";
                    // Set its owner to the current user
                    $message->owner_guid = $_SESSION['user']->getGUID();
                    // For now, set its access to public (we'll add an access dropdown shortly)
                    $message->access_id = 2;
                    // Set its description appropriately
                    $message->title = $title;
                    $message->description = $message_contents;

                    // set the metadata
                    $message->toId = $r->getGUID(); // the user receiving the message
                    $message->readYet = 0; // this is a toggle between 0 / 1 (1 = read)
                    $message->hiddenFrom = 0; // this is used when a user deletes a message in their sentbox, it is a flag
                    $message->hiddenTo = 0; // this is used when a user deletes a message in their inbox

                    if($recipient instanceof ElggGroup) {
                        $message->groupReply = $recipient->guid;
                        $message->nonMemberGroupReply = $nonMemberGroupReply;
                    }

                    // Save 'send' the message
                    if (!$message->save()) {
                        register_error(elgg_echo("messages:error"));
                        forward("mod/messages/send.php");
                    }


                    // if the new message is a reply then create a relationship link between the new message
                    // and the message it is in reply to

                    if($reply){

                        $create_relationship = add_entity_relationship($message->guid, "reply", $reply);

                    }

                    // Email notification
                    global $CONFIG;
                    $message_contents = strip_tags($message_contents);
                    if ($r->getGUID() != $_SESSION['user']->getGUID()) {

                        notify_user($r->getGUID(), $_SESSION['user']->getGUID(), elgg_echo('messages:email:subject'),
                            sprintf(
                                elgg_echo('messages:email:body'),
                                $_SESSION['user']->name,
                                $message_contents,
                                $CONFIG->wwwroot . "pg/messages/" . $r->username,
                                $_SESSION['user']->name,
                                $CONFIG->wwwroot . "mod/messages/send.php?send_to=" . $_SESSION['user']->getGUID()
                            )
                        );

                    }
                }
            }

            $sent_message = new ElggObject();
            $sent_message->subtype = "sent_messages";
            $sent_message->owner_guid = $_SESSION['user']->getGUID();
            // For now, set its access to public (we'll add an access dropdown shortly)
            $sent_message->access_id = 2;
            // Set its description appropriately
            $sent_message->title = $title;
            $sent_message->description = $message_contents;

            $sent_message->toId = $recipient->guid;
            $sent_message->hiddenTo = 0; // this is used when a user deletes a message in their inbox

            if($recipient instanceof ElggGroup && $nonMemberGroupReply != $_SESSION['user']->getGUID()) {
                $sent_message->nonMemberGroupReply = $nonMemberGroupReply;
            }
            $sent_message->save();
			/// LdShake change ///

            // Success message
            system_message(T("Your message was successfully sent."));

            // Forward to the users sentbox
            forward('pg/messages/' . $_SESSION['user']->username);


        } // end of message check if statement
     
    
?>